# n steps to reach the top. Price p[i] to step on the ith stair.
# Can climb 1 or 2 steps at a time(k=2). What is the cheapest price to get to the top?

# Objective Function: Cheapest price to get to the ith stair
# Eg: k=2, p=[3,2,4]
# Base cases: f(0)=0, f(1)=3, f(2)=min(5,2)=2
# Recursive relation: f(n) = p[n] + min(f(n-1), f(n-2))
# Bottom-up
# Answer will be in the last element

def PaidStaircase(n, p):
    dp = [0]    
    dp.append(p[0])
    
    for i in range(2, n+1):
        dp.append(p[i-1] + min(dp[i-1], dp[i-2]))
        
    return dp[-1]
